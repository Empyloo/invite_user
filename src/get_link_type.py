import logging
from src.user_password_checker import is_password_set

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def generate_link_type(payload: dict) -> str:
    """
    Generate the link type depending on `payload["redirect_to"]`.
    If `payload["redirect_to"]` is a /set-password route, return "recover".
    If `payload["redirect_to"]` is a /survey route, return "magiclink".

    Args:
        payload: dict
    Raises:
        ValueError: If `payload["redirect_to"]` is not a valid route.
    """

    if "/set-password" in payload["redirect_to"]:
        return "invite"
    if "/reset-password" in payload["redirect_to"]:
        return "recover"
    if "/survey" in payload["redirect_to"]:
        return "magiclink"
    raise ValueError("Invalid redirect_to value")


def resolve_link_type(db_url: str, email: str, generated_link_type: str) -> str:
    """
    Determines the appropriate link type to send to the user.

    If the user's password is not set, returns "recover".
    If the user's password is set, returns the generated link type.
    If the user does not exist, re-raises the exception.

    Args:
        db_url: str - The database connection string.
        email: str - The user's email.
        generated_link_type: str - The link type generated by `generate_link_type`.

    Returns:
        str - The appropriate link type.
    """
    try:
        password_status = is_password_set(db_url, email)
        if password_status == "user not found":
            raise Exception("User not found")
        elif password_status == "password not set":
            return "recover"
        elif password_status == "password set" and generated_link_type == "invite":
            return "recover"
        else:
            return generated_link_type
    except Exception as e:
        logger.error(f"Error checking if password is set for user {email}: {e}")
        raise e
